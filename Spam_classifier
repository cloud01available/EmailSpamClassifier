import numpy as np
#powerful python library (Mathematical-array operations,random number generation)

import pandas as pd
#Data manupulation and analysis(structured data)

from sklearn.model_selection import train_test_split
#tools and algorithms for ml task(classification,regression and model evaluation)
#train_test_split=to split training and testing dataset

from sklearn.feature_extraction.text import TfidfVectorizer
#feature of extraction technique used in nlp (representation)

from sklearn.linear_model import LogisticRegression
#Binary classification

from sklearn.metrics import accuracy_score
#performance (accuracy of prediction)

df= pd.read_csv('mail_data.csv')
print(df)
#Not spam is called ham

data=df.where((pd.notnull(df)),'')

data.head(10)

data.info()

data.shape
#rows and column count

data.loc[data['Category']=='spam','Category']=0
data.loc[data['Category']=='ham','Category']=1

X=data['Message']
Y=data['Category']

print(X)

print(Y)

X_train, X_test, Y_train, Y_test=train_test_split(X,Y,test_size=0.2,random_state=3)
#80%training, 20%testing, Randomstate=3

print((X.shape))#total
print(X_train.shape)#80%
print(X_test.shape)#20%

print(Y.shape)
print(Y_train.shape)
print(Y_test.shape)

# TF-IDF feature extraction
feature_extraction = TfidfVectorizer(min_df=1, stop_words='english', lowercase=True)
X_train_features = feature_extraction.fit_transform(X_train)
X_test_features = feature_extraction.transform(X_test)

Y_train = Y_train.astype(int)
Y_test = Y_test.astype(int)

print(X_train)

print(X_train_features)

Model= LogisticRegression()

Model.fit(X_train_features, Y_train)

prediction_on_training_data= Model.predict(X_train_features)

accuracy_on_training_data=accuracy_score(Y_train, prediction_on_training_data)

print('Acc on training data:', accuracy_on_training_data)

prediction_on_test_data=Model.predict(X_test_features)
accuracy_on_test_data=accuracy_score(Y_test, prediction_on_test_data)

print('Acc on test data:', accuracy_on_test_data)

input_your_mail=[" "]
input_data_features= feature_extraction.transform(input_your_mail)
prediction=Model.predict(input_data_features)
print(prediction)

if(prediction[0]==1):
  print('Ham mail')

else:
  print('Spam mail')


